{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { StatusBar } from 'expo-status-bar';\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function App() {\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    enteredGoal = _useState2[0],\n    setEnteredGoal = _useState2[1];\n  var _useState3 = useState([]),\n    _useState4 = _slicedToArray(_useState3, 2),\n    goals = _useState4[0],\n    setGoals = _useState4[1];\n  var goalInputHandler = function goalInputHandler(enteredText) {\n    setEnteredGoal(enteredText);\n  };\n  var addGoalHandler = function addGoalHandler() {\n    if (enteredGoal.trim().length === 0) return;\n    setGoals(function (currentGoals) {\n      return [].concat(_toConsumableArray(currentGoals), [{\n        text: enteredGoal,\n        id: Math.random().toString()\n      }]);\n    });\n    setEnteredGoal('');\n  };\n  return _jsxs(View, {\n    style: styles.appContainer,\n    children: [_jsxs(View, {\n      style: styles.inputContainer,\n      children: [_jsx(TextInput, {\n        style: styles.textInput\n      }), _jsx(Button, {\n        title: \"Add Goal\"\n      })]\n    }), _jsx(View, {\n      children: _jsx(Text, {\n        children: \"List of goals\"\n      })\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  appContainer: {\n    padding: 50,\n    paddingHorizontal: 16\n  },\n  inputContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingBottom: 24,\n    borderBottomWidth: 1,\n    borderBottomColor: '#cccccc'\n  },\n  textInput: {\n    borderWidth: 1,\n    borderColor: '#cccccc',\n    width: '70%',\n    marginRight: 8,\n    padding: 8\n  },\n  goalsContainer: {\n    flex: 4\n  }\n});","map":{"version":3,"names":["StatusBar","Button","StyleSheet","Text","TextInput","View","jsx","_jsx","jsxs","_jsxs","App","_useState","useState","_useState2","_slicedToArray","enteredGoal","setEnteredGoal","_useState3","_useState4","goals","setGoals","goalInputHandler","enteredText","addGoalHandler","trim","length","currentGoals","concat","_toConsumableArray","text","id","Math","random","toString","style","styles","appContainer","children","inputContainer","textInput","title","create","padding","paddingHorizontal","flexDirection","justifyContent","alignItems","paddingBottom","borderBottomWidth","borderBottomColor","borderWidth","borderColor","width","marginRight","goalsContainer","flex"],"sources":["C:/Users/quintet/Desktop/Personal_Study/React_Native/starting-project/App.js"],"sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport { Button, StyleSheet, Text, TextInput, View } from 'react-native';\n\nexport default function App() {\n  const [enteredGoal, setEnteredGoal] = useState('');\n  const [goals, setGoals] = useState([]);\n\n  const goalInputHandler = (enteredText) => {\n    setEnteredGoal(enteredText)\n  }\n  const addGoalHandler = () => {\n    if (enteredGoal.trim().length === 0) return;\n    setGoals((currentGoals) => [\n      ...currentGoals, { text: enteredGoal, id: Math.random().toString() },\n    ]);\n    setEnteredGoal('');\n  }\n  return (\n    <View style={styles.appContainer}>\n      <View style={styles.inputContainer}>\n        <TextInput style={styles.textInput} />\n        <Button title=\"Add Goal\" />\n      </View>\n      <View>\n        <Text>List of goals</Text>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  appContainer: {\n    padding: 50,\n    paddingHorizontal: 16\n  },\n  inputContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingBottom: 24,\n    borderBottomWidth: 1,\n    borderBottomColor: '#cccccc'\n  },\n  textInput: {\n    borderWidth: 1,\n    borderColor: '#cccccc',\n    width: '70%',\n    marginRight: 8,\n    padding: 8\n  },\n  goalsContainer: {\n    flex: 4\n  }\n\n});\n"],"mappings":";;AAAA,SAASA,SAAS,QAAQ,iBAAiB;AAAC,OAAAC,MAAA;AAAA,OAAAC,UAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,SAAA;AAAA,OAAAC,IAAA;AAAA,SAAAC,GAAA,IAAAC,IAAA,EAAAC,IAAA,IAAAC,KAAA;AAG5C,eAAe,SAASC,GAAGA,CAAA,EAAG;EAC5B,IAAAC,SAAA,GAAsCC,QAAQ,CAAC,EAAE,CAAC;IAAAC,UAAA,GAAAC,cAAA,CAAAH,SAAA;IAA3CI,WAAW,GAAAF,UAAA;IAAEG,cAAc,GAAAH,UAAA;EAClC,IAAAI,UAAA,GAA0BL,QAAQ,CAAC,EAAE,CAAC;IAAAM,UAAA,GAAAJ,cAAA,CAAAG,UAAA;IAA/BE,KAAK,GAAAD,UAAA;IAAEE,QAAQ,GAAAF,UAAA;EAEtB,IAAMG,gBAAgB,GAAG,SAAnBA,gBAAgBA,CAAIC,WAAW,EAAK;IACxCN,cAAc,CAACM,WAAW,CAAC;EAC7B,CAAC;EACD,IAAMC,cAAc,GAAG,SAAjBA,cAAcA,CAAA,EAAS;IAC3B,IAAIR,WAAW,CAACS,IAAI,CAAC,CAAC,CAACC,MAAM,KAAK,CAAC,EAAE;IACrCL,QAAQ,CAAC,UAACM,YAAY;MAAA,UAAAC,MAAA,CAAAC,kBAAA,CACjBF,YAAY,IAAE;QAAEG,IAAI,EAAEd,WAAW;QAAEe,EAAE,EAAEC,IAAI,CAACC,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC;MAAE,CAAC;IAAA,CACrE,CAAC;IACFjB,cAAc,CAAC,EAAE,CAAC;EACpB,CAAC;EACD,OACEP,KAAA,CAACJ,IAAI;IAAC6B,KAAK,EAAEC,MAAM,CAACC,YAAa;IAAAC,QAAA,GAC/B5B,KAAA,CAACJ,IAAI;MAAC6B,KAAK,EAAEC,MAAM,CAACG,cAAe;MAAAD,QAAA,GACjC9B,IAAA,CAACH,SAAS;QAAC8B,KAAK,EAAEC,MAAM,CAACI;MAAU,CAAE,CAAC,EACtChC,IAAA,CAACN,MAAM;QAACuC,KAAK,EAAC;MAAU,CAAE,CAAC;IAAA,CACvB,CAAC,EACPjC,IAAA,CAACF,IAAI;MAAAgC,QAAA,EACH9B,IAAA,CAACJ,IAAI;QAAAkC,QAAA,EAAC;MAAa,CAAM;IAAC,CACtB,CAAC;EAAA,CACH,CAAC;AAEX;AAEA,IAAMF,MAAM,GAAGjC,UAAU,CAACuC,MAAM,CAAC;EAC/BL,YAAY,EAAE;IACZM,OAAO,EAAE,EAAE;IACXC,iBAAiB,EAAE;EACrB,CAAC;EACDL,cAAc,EAAE;IACdM,aAAa,EAAE,KAAK;IACpBC,cAAc,EAAE,eAAe;IAC/BC,UAAU,EAAE,QAAQ;IACpBC,aAAa,EAAE,EAAE;IACjBC,iBAAiB,EAAE,CAAC;IACpBC,iBAAiB,EAAE;EACrB,CAAC;EACDV,SAAS,EAAE;IACTW,WAAW,EAAE,CAAC;IACdC,WAAW,EAAE,SAAS;IACtBC,KAAK,EAAE,KAAK;IACZC,WAAW,EAAE,CAAC;IACdX,OAAO,EAAE;EACX,CAAC;EACDY,cAAc,EAAE;IACdC,IAAI,EAAE;EACR;AAEF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}